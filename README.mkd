## What? 

I needed a fast, memory efficient, simple-to-use, and simple-to-deploy command
line tool for validating very large XML files with external DTDs or XSD schemas.
This is the result. A build recipe (and downloads) that creates a single file
executable having no other dependencies than a C runtime library. No need to
fiddle with extra libraries, .NET, Java, Ruby, Python or any other runtimes.

The XValid project consists of the following pieces:

* a build recipe source repository
* a `libxml2` development dependencies download for Windows users, and
* a download containing the single file `xval` executable for both Windows and Linux users

## Usage Overview - build recipe

### building on Windows

1. If not already available, install Ruby using the [RubyInstaller](http://rubyinstaller.org/downloads).
2. Install the [DevKit](http://rubyinstaller.org/add-ons/devkit/) and add it to
   your `PATH` environment variable by running it's `devkitvars.bat` file.
3. Download and install the provided `libxml2` library.
4. Run `ruby configure` to configure for building, providing options as needed.
5. Run `rake`.

### building on Linux

1. If not already available, install Ruby and ensure it's on your `PATH`.
2. Install the `libxml2` headers and libraries relevant to your distribution.
3. Run `./configure` to prepare for building, providing options as needed.
4. Run `rake`.

### configure usage

    C:\projects\xvalid-git>ruby configure --help
    usage: ruby configure [options]
    
    libxml2 options:
      --with-xml2-include, -I <s>:   libxml2 header directory
          --with-xml2-lib, -L <s>:   libxml2 library directory
    
    compiler toolkit options:
                         --cc <s>:   C compiler (default: gcc)
               --defines, -d <s+>:   preprocessor definitions
              --optflags, -o <s+>:   optimization settings (default: O3)
            --debugflags, -g <s+>:   debug settings
    
    general options:
                    --debug-build:   build app with debugging messages
                       --help, -h:   Show this message

## Usage Overview - xval executable

Once you've downloaded either the pre-built executable or built your own version,
simply run it via `xval.exe` (Windows) or `./xval` (Linux). That's it!

You can always get command line help information by running the executable with
no arguments like the following.

    C:\projects\xvalid-git>xval.exe
    XValid vX.Y.Z - validate XML documents
    Usage: xval [options] XML_FILE ...
    
    where validation are:
      --dtd FILE      validate against external DTD file
      --xsd FILE      validate against external XSD schema file
    
    where general options are:
      --handler FILE  use external error handler (.so|.dll|.lua)

## Considerations

* Only UTF-8, UTF-16, ISO-8859-1, and ASCII character encodings supported. No iconv library support.
* Validation against either an external DTD or XSD, not both simultaneously.

## TODO

* add `upx` executable compression support to the build recipe
* integrate Lua (5.2?) interpreter
* add runtime/CLI selectable support for `.so`, `.dll`, `.lua` error handlers
* add support for building `libxml2` from source (leverage MiniPortile?)

## License

3-clause BSD. See project LICENSE file.
